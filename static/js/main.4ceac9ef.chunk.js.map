{"version":3,"sources":["helpers/addMonthStrings.js","helpers/fetchData.js","helpers/tempColoring.js","helpers/chart.js","helpers/createLegendArr.js","App.js","index.js"],"names":["addMonthStrings","dataset","i","length","useFetch","url","useState","data","setData","baseTemperature","setBaseTemperature","loading","setLoading","a","fetch","response","json","monthlyVariance","updatedDataset","useEffect","fetchUrl","tempColoring","currTemp","colorPalette","legendArr","color1","color2","color3","color4","color5","color6","color7","color8","color9","color10","color11","render","ref","width","height","svg","d3","current","xValue","d","yValue","Math","round","margin","innerWidth","innerHeight","minYear","maxYear","yearRange","minMonth","maxMonth","cellWidth","cellHeight","xAxisLabelXPos","yAxisLabelXPos","titleXAxisPos","subtitleText","minTemp","maxTemp","numOfSections","section","temp","push","createLegendArr","heatmap","append","attr","xScale","domain","range","yScale","xAxis","tickFormat","Date","setFullYear","tickSizeOuter","yAxis","setMonth","call","text","selectAll","remove","titleSection","titleYAxisPos","tooltip","style","enter","on","transition","duration","html","monthStr","variance","pageX","pageY","legend","tempScale","legendXAxis","tickValues","App","useRef","className","viewBox","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4ceac9ef.chunk.js","sourcesContent":["// addMonthStrings converts month integer into a string and adds it to the dataset\r\nexport default function addMonthStrings(dataset) {\r\n  for (let i = 0; i < dataset.length; i++) {\r\n    let newPropName = \"monthStr\";\r\n    switch (dataset[i][\"month\"]) {\r\n      case 1:\r\n        dataset[i][newPropName] = \"January\";\r\n        break;\r\n      case 2:\r\n        dataset[i][newPropName] = \"February\";\r\n        break;\r\n      case 3:\r\n        dataset[i][newPropName] = \"March\";\r\n        break;\r\n      case 4:\r\n        dataset[i][newPropName] = \"April\";\r\n        break;\r\n      case 5:\r\n        dataset[i][newPropName] = \"May\";\r\n        break;\r\n      case 6:\r\n        dataset[i][newPropName] = \"June\";\r\n        break;\r\n      case 7:\r\n        dataset[i][newPropName] = \"July\";\r\n        break;\r\n      case 8:\r\n        dataset[i][newPropName] = \"August\";\r\n        break;\r\n      case 9:\r\n        dataset[i][newPropName] = \"September\";\r\n        break;\r\n      case 10:\r\n        dataset[i][newPropName] = \"October\";\r\n        break;\r\n      case 11:\r\n        dataset[i][newPropName] = \"November\";\r\n        break;\r\n      case 12:\r\n        dataset[i][newPropName] = \"December\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  return dataset;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport addMonthStrings from \"./addMonthStrings\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState([]);\r\n  const [baseTemperature, setBaseTemperature] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function fetchUrl() {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    const dataset = await json.monthlyVariance;\r\n    const updatedDataset = await addMonthStrings(dataset);\r\n    const baseTemperature = await json.baseTemperature;\r\n    setData(updatedDataset);\r\n    setBaseTemperature(baseTemperature);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchUrl();\r\n  }, []);\r\n  return [data, baseTemperature, loading];\r\n}\r\nexport { useFetch };\r\n","// tempColoring is a helper function that assigns coloring to the cells and legend based on selected color palette\r\nexport default function tempColoring(currTemp, colorPalette, legendArr) {\r\n  if (currTemp <= legendArr[0]) {\r\n    return colorPalette.color1;\r\n  } else if (currTemp > legendArr[0] && currTemp <= legendArr[1]) {\r\n    return colorPalette.color2;\r\n  } else if (currTemp > legendArr[1] && currTemp <= legendArr[2]) {\r\n    return colorPalette.color3;\r\n  } else if (currTemp > legendArr[2] && currTemp <= legendArr[3]) {\r\n    return colorPalette.color4;\r\n  } else if (currTemp > legendArr[3] && currTemp <= legendArr[4]) {\r\n    return colorPalette.color5;\r\n  } else if (currTemp > legendArr[4] && currTemp <= legendArr[5]) {\r\n    return colorPalette.color6;\r\n  } else if (currTemp > legendArr[5] && currTemp <= legendArr[6]) {\r\n    return colorPalette.color7;\r\n  } else if (currTemp > legendArr[6] && currTemp <= legendArr[7]) {\r\n    return colorPalette.color8;\r\n  } else if (currTemp > legendArr[7] && currTemp <= legendArr[8]) {\r\n    return colorPalette.color9;\r\n  } else if (currTemp > legendArr[8] && currTemp <= legendArr[9]) {\r\n    return colorPalette.color10;\r\n  } else {\r\n    return colorPalette.color11;\r\n  }\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\nimport createLegendArr from \"./createLegendArr\";\r\nimport tempColoring from \"./tempColoring\";\r\n\r\nexport default function render(dataset, baseTemperature, ref, width, height) {\r\n  const svg = d3.select(ref.current);\r\n\r\n  const xValue = d => d[\"year\"];\r\n  const yValue = d => d[\"month\"] - 1;\r\n  const monthStr = d => d[\"monthStr\"];\r\n  const variance = d => Math.round(d[\"variance\"] * 10) / 10;\r\n  const currTemp = d => Math.round((baseTemperature + d[\"variance\"]) * 10) / 10;\r\n\r\n  // Initiate the svg sizing for the visualization\r\n  const margin = { top: 100, right: 60, bottom: 150, left: 100 };\r\n  const innerWidth = width - margin.left - margin.right;\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n\r\n  // Calculate and initiate relevant parameters\r\n  const minYear = d3.min(dataset, xValue);\r\n  const maxYear = d3.max(dataset, xValue);\r\n  const yearRange = maxYear - minYear;\r\n\r\n  const minMonth = d3.min(dataset, yValue);\r\n  const maxMonth = d3.max(dataset, yValue);\r\n\r\n  const cellWidth = innerWidth / yearRange;\r\n  const cellHeight = innerHeight / 12;\r\n\r\n  // Create and position axes text labels and the title\r\n  const xAxisLabelText = \"Years\";\r\n  const xAxisLabelXPos = innerWidth / 2;\r\n  const xAxisLabelYPos = 40;\r\n\r\n  const yAxisLabelText = \"Months\";\r\n  const yAxisLabelXPos = -innerHeight / 2;\r\n  const yAxisLabelYPos = -70;\r\n\r\n  const titleText = \"Monthly Global Land-Surface Temperature\";\r\n  const titleXAxisPos = width / 2;\r\n  const titleYAxisPos = 40;\r\n\r\n  const subtitleText = `${minYear} - ${maxYear}: base temperature ${baseTemperature}℃`;\r\n  const subtitleYAxisPos = titleYAxisPos + 22;\r\n\r\n  // Define variables used in the legend section\r\n  const numOfSections = 11;\r\n  const minTemp = d3.min(dataset, currTemp);\r\n  const maxTemp = d3.max(dataset, currTemp);\r\n  const section = Math.round(((maxTemp - minTemp) / numOfSections) * 10) / 10;\r\n  const legendArr = createLegendArr(minTemp, numOfSections, section);\r\n  const legendWidth = 300;\r\n  const legendBarWidth = legendWidth / numOfSections;\r\n\r\n  const colorPalette = {\r\n    color1: \"rgb(49, 54, 149)\",\r\n    color2: \"rgb(69, 117, 180)\",\r\n    color3: \"rgb(116, 173, 209)\",\r\n    color4: \"rgb(171, 217, 233)\",\r\n    color5: \"rgb(224, 243, 248)\",\r\n    color6: \"rgb(255, 255, 191)\",\r\n    color7: \"rgb(254, 224, 144)\",\r\n    color8: \"rgb(253, 174, 97)\",\r\n    color9: \"rgb(244, 109, 67)\",\r\n    color10: \"rgb(215, 48, 39)\",\r\n    color11: \"rgb(165, 0, 38)\"\r\n  }; // Colors will be assigned correspondingly to the increase in temp (1 - coldest, 11 - warmest)\r\n\r\n  // Initiate a heat map\r\n  const heatmap = svg\r\n    .append(\"g\")\r\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n  // Establish a scale\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([minYear - 1, maxYear])\r\n    .range([0, innerWidth]);\r\n\r\n  const yScale = d3\r\n    .scaleTime()\r\n    .domain([minMonth, maxMonth])\r\n    .range([0, innerHeight]);\r\n\r\n  // Create axes\r\n  const xAxis = d3\r\n    .axisBottom(xScale)\r\n    .tickFormat(d => d3.timeFormat(\"%Y\")(new Date(0).setFullYear(d)))\r\n    .tickSizeOuter(0);\r\n  const yAxis = d3\r\n    .axisLeft(yScale)\r\n    .tickFormat(d => d3.timeFormat(\"%B\")(new Date(0).setMonth(d)));\r\n\r\n  const xAxisG = heatmap\r\n    .append(\"g\")\r\n    .attr(\"id\", \"x-axis\")\r\n    .attr(\"transform\", `translate(0, ${innerHeight + cellHeight / 2})`)\r\n    .call(xAxis);\r\n\r\n  xAxisG\r\n    .append(\"text\")\r\n    .attr(\"id\", \"xAxis-label\")\r\n    .attr(\"x\", xAxisLabelXPos)\r\n    .attr(\"y\", xAxisLabelYPos)\r\n    .text(xAxisLabelText);\r\n\r\n  const yAxisG = heatmap\r\n    .append(\"g\")\r\n    .attr(\"id\", \"y-axis\")\r\n    .call(yAxis)\r\n    .selectAll(\".domain\")\r\n    .remove();\r\n\r\n  yAxisG\r\n    .append(\"text\")\r\n    .attr(\"id\", \"yAxis-label\")\r\n    .attr(\"x\", yAxisLabelXPos)\r\n    .attr(\"y\", yAxisLabelYPos)\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .text(yAxisLabelText);\r\n\r\n  const titleSection = svg.append(\"g\").attr(\"text-anchor\", \"middle\");\r\n\r\n  titleSection\r\n    .append(\"text\")\r\n    .attr(\"id\", \"title\")\r\n    .attr(\"x\", titleXAxisPos)\r\n    .attr(\"y\", titleYAxisPos)\r\n    .text(titleText);\r\n\r\n  titleSection\r\n    .append(\"text\")\r\n    .attr(\"id\", \"description\")\r\n    .attr(\"x\", titleXAxisPos)\r\n    .attr(\"y\", subtitleYAxisPos)\r\n    .text(subtitleText);\r\n\r\n  let tooltip = d3\r\n    .select(\"body\")\r\n    .append(\"div\")\r\n    .attr(\"id\", \"tooltip\")\r\n    .style(\"opacity\", 0);\r\n\r\n  // Append cells to the heatmap\r\n  heatmap\r\n    .selectAll(\"rect\")\r\n    .data(dataset)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"x\", d => xScale(xValue(d)))\r\n    .attr(\"y\", d => yScale(yValue(d) - 0.5))\r\n    .attr(\"width\", cellWidth)\r\n    .attr(\"height\", cellHeight)\r\n    .attr(\"fill\", d => tempColoring(currTemp(d), colorPalette, legendArr)) //fill with palette accordingly\r\n    .attr(\"class\", \"cell\")\r\n    .attr(\"data-year\", d => xValue(d))\r\n    .attr(\"data-month\", d => yValue(d))\r\n    .attr(\"data-temp\", d => currTemp(d))\r\n    .on(\"mouseover\", d => {\r\n      tooltip\r\n        .transition()\r\n        .duration(200)\r\n        .style(\"opacity\", 0.9);\r\n      tooltip\r\n        .html(\r\n          `${xValue(d)} - ${monthStr(d)}\r\n                    </br>${currTemp(d)}°C\r\n                    </br>${variance(d)}°C`\r\n        )\r\n        .style(\"left\", d3.event.pageX + \"px\")\r\n        .style(\"top\", d3.event.pageY + \"px\")\r\n        .attr(\"data-year\", xValue(d));\r\n    })\r\n    .on(\"mouseout\", d => {\r\n      tooltip\r\n        .transition()\r\n        .duration(500)\r\n        .style(\"opacity\", 0);\r\n    });\r\n\r\n  // Add the legend to the visualization\r\n  const legend = svg\r\n    .append(\"g\")\r\n    .attr(\"id\", \"legend\")\r\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 80})`);\r\n\r\n  const tempScale = d3\r\n    .scaleLinear()\r\n    .domain([minTemp, maxTemp])\r\n    .range([0, legendWidth]);\r\n\r\n  const legendXAxis = d3\r\n    .axisBottom(tempScale)\r\n    .tickValues(legendArr)\r\n    .tickFormat(d3.format(\".1f\"))\r\n    .tickSizeOuter(0);\r\n\r\n  legend\r\n    .append(\"g\")\r\n    .attr(\"id\", \"legend-x-axis\")\r\n    .attr(\"transform\", `translate(0, ${innerHeight + 10})`)\r\n    .call(legendXAxis);\r\n\r\n  legend\r\n    .selectAll(\"rect\")\r\n    .data(legendArr)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"legend-rect\")\r\n    .attr(\"x\", (d, i) => i * legendBarWidth)\r\n    .attr(\"transform\", `translate(0, ${innerHeight - 10})`)\r\n    .attr(\"width\", legendBarWidth)\r\n    .attr(\"height\", 20)\r\n    .attr(\"fill\", d => tempColoring(d, colorPalette, legendArr)); //fill with palette accordingly\r\n}\r\n\r\nexport { render };\r\n","/* createLegendArr is a helper function that is used to divide calculated \r\ntemperatures and to create approximately equal coloring groups */\r\nexport default function createLegendArr(minTemp, numOfSections, section) {\r\n  const legendArr = [];\r\n  let temp = minTemp;\r\n  for (let i = 0; i < numOfSections; i++) {\r\n    temp += section;\r\n    legendArr.push(Math.round(temp * 10) / 10);\r\n  }\r\n  return legendArr;\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\nimport \"./styles/main.scss\";\n\nimport { useFetch } from \"./helpers/fetchData\";\nimport { render } from \"./helpers/chart\";\n\nexport default function App() {\n  const WIDTH = 1260;\n  const HEIGHT = 600;\n  const DATA_LINK =\n    \"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json\";\n  const [data, baseTemperature, loading] = useFetch(DATA_LINK);\n  const ref = useRef();\n\n  useEffect(() => {\n    if (data.length !== 0) {\n      render(data, baseTemperature, ref, WIDTH, HEIGHT);\n    }\n  }, [loading]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"viz-container\">\n        <svg className=\"graph\" ref={ref} viewBox={`0 0 ${WIDTH} ${HEIGHT}`} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}